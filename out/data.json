{
    "project": {},
    "files": {
        "howler/howler.js": {
            "name": "howler/howler.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "scripts/MusicManip.js": {
            "name": "scripts/MusicManip.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "scripts/MusicSnippet.js": {
            "name": "scripts/MusicSnippet.js",
            "modules": {},
            "classes": {
                "MusicSnippet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/Note.js": {
            "name": "scripts/Note.js",
            "modules": {},
            "classes": {
                "Note": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/ParseCSV.js": {
            "name": "scripts/ParseCSV.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "scripts/QuestionGenerator.js": {
            "name": "scripts/QuestionGenerator.js",
            "modules": {},
            "classes": {
                "QuestionGenerator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/SuccessiveMelodicIntervals.js": {
            "name": "scripts/SuccessiveMelodicIntervals.js",
            "modules": {},
            "classes": {
                "SuccessiveMelodicIntervals": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/ValidateSMI.js": {
            "name": "scripts/ValidateSMI.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "scripts/noteToFileNum.js": {
            "name": "scripts/noteToFileNum.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "MusicSnippet": {
            "name": "MusicSnippet",
            "shortname": "MusicSnippet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/MusicSnippet.js",
            "line": 8,
            "description": "Converts the given notes into Howl objects that can be played.\nCan do transformations such as transposition and inversion.\nPlays the transformed notes in a given/preset style.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "notes",
                    "description": "Array of notes that define the sonority",
                    "type": "String[]"
                },
                {
                    "name": "type",
                    "description": "Type of the sonority",
                    "type": "String"
                },
                {
                    "name": "quality",
                    "description": "Quality of the sonority",
                    "type": "String"
                },
                {
                    "name": "category",
                    "description": "Category of the sonority",
                    "type": "String"
                }
            ]
        },
        "Note": {
            "name": "Note",
            "shortname": "Note",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/Note.js",
            "line": 1,
            "description": "Represents a musical note.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "notename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "octave",
                    "description": "",
                    "type": "Integer"
                }
            ]
        },
        "QuestionGenerator": {
            "name": "QuestionGenerator",
            "shortname": "QuestionGenerator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/QuestionGenerator.js",
            "line": 1,
            "description": "Script that generates a random question. Parameter should\nbe a list of integers that refer to indeces in the CSV file\nover which the user would like to be tested.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "list",
                    "description": "",
                    "type": "Integer[]"
                }
            ]
        },
        "SuccessiveMelodicIntervals": {
            "name": "SuccessiveMelodicIntervals",
            "shortname": "SuccessiveMelodicIntervals",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 1,
            "description": "Generates a series of four random twelve-tone notes.",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "howler/howler.js",
            "line": 62,
            "description": "Get/set the global volume for all sounds.",
            "params": [
                {
                    "name": "vol",
                    "description": "Volume from 0.0 to 1.0.",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "Returns self or current volume.",
                "type": "Howler/Float"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 97,
            "description": "Mute all sounds.",
            "return": {
                "description": "",
                "type": "Howler"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 107,
            "description": "Unmute all sounds.",
            "return": {
                "description": "",
                "type": "Howler"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 117,
            "description": "Handle muting and unmuting globally.",
            "params": [
                {
                    "name": "muted",
                    "description": "Is muted or not.",
                    "type": "Boolean"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 140,
            "description": "Check for codec support.",
            "params": [
                {
                    "name": "ext",
                    "description": "Audio file extension.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 149,
            "description": "iOS will only allow audio to be played after a user interaction.\nAttempt to automatically unlock audio on the first user interaction.\nConcept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/",
            "return": {
                "description": "",
                "type": "Howler"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 277,
            "description": "Load an audio file.",
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 379,
            "description": "Get/set the URLs to be pulled from to play in this source.",
            "params": [
                {
                    "name": "urls",
                    "description": "Arry of URLs to load from",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns self or the current URLs",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 399,
            "description": "Play a sound from the current time (0 by default).",
            "params": [
                {
                    "name": "sprite",
                    "description": "(optional) Plays from the specified position in the sound sprite definition.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "(optional) Returns the unique playback id for this sound instance.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 547,
            "description": "Pause playback and save the current position.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 593,
            "description": "Stop playback and reset to start.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 639,
            "description": "Mute this sound.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 668,
            "description": "Unmute this sound.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 697,
            "description": "Get/set volume of this sound.",
            "params": [
                {
                    "name": "vol",
                    "description": "Volume from 0.0 to 1.0.",
                    "type": "Float"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns self or current volume.",
                "type": "Howl/Float"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 736,
            "description": "Get/set whether to loop the sound.",
            "params": [
                {
                    "name": "loop",
                    "description": "To loop or not to loop, that is the question.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns self or current looping value.",
                "type": "Howl/Boolean"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 753,
            "description": "Get/set sound sprite definition.",
            "params": [
                {
                    "name": "sprite",
                    "description": "Example: {spriteName: [offset, duration, loop]}",
                    "type": "Object"
                },
                {
                    "name": "offset",
                    "description": "Where to begin playback in milliseconds",
                    "type": "Integer"
                },
                {
                    "name": "duration",
                    "description": "How long to play in milliseconds",
                    "type": "Integer"
                },
                {
                    "name": "loop",
                    "description": "(optional) Set true to loop this sprite",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns current sprite sheet or self.",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 773,
            "description": "Get/set the position of playback.",
            "params": [
                {
                    "name": "pos",
                    "description": "The position to move current playback to.",
                    "type": "Float"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns self or current playback position.",
                "type": "Howl/Float"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 817,
            "description": "Get/set the 3D position of the audio source.\nThe most common usage is to set the 'x' position\nto affect the left/right ear panning. Setting any value higher than\n1.0 will begin to decrease the volume of the sound as it moves further away.\nNOTE: This only works with Web Audio API, HTML5 Audio playback\nwill not be affected.",
            "params": [
                {
                    "name": "x",
                    "description": "The x-position of the playback from -1000.0 to 1000.0",
                    "type": "Float"
                },
                {
                    "name": "y",
                    "description": "The y-position of the playback from -1000.0 to 1000.0",
                    "type": "Float"
                },
                {
                    "name": "z",
                    "description": "The z-position of the playback from -1000.0 to 1000.0",
                    "type": "Float"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns self or the current 3D position: [x, y, z]",
                "type": "Howl/Array"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 862,
            "description": "Fade a currently playing sound between two volumes.",
            "params": [
                {
                    "name": "from",
                    "description": "The volume to fade from (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "The volume to fade to (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "Time in milliseconds to fade.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "(optional) Fired when the fade is complete.",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 907,
            "description": "[DEPRECATED] Fade in the current sound.",
            "params": [
                {
                    "name": "to",
                    "description": "Volume to fade to (0.0 to 1.0).",
                    "type": "Float"
                },
                {
                    "name": "len",
                    "description": "Time in milliseconds to fade.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 918,
            "description": "[DEPRECATED] Fade out the current sound and pause when finished.",
            "params": [
                {
                    "name": "to",
                    "description": "Volume to fade to (0.0 to 1.0).",
                    "type": "Float"
                },
                {
                    "name": "len",
                    "description": "Time in milliseconds to fade.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 938,
            "description": "Get an audio node by ID.",
            "return": {
                "description": "Audio node.",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 957,
            "description": "Get the first active audio node.",
            "return": {
                "description": "Audio node.",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 979,
            "description": "Get the first inactive audio node.\nIf there is none, create a new one and add it to the pool.",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when the audio node is ready.",
                    "type": "Function"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1024,
            "description": "If there are more than 5 inactive audio nodes in the pool, clear out the rest.",
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1057,
            "description": "Clear 'onend' timeout before it ends.",
            "params": [
                {
                    "name": "soundId",
                    "description": "The play instance ID.",
                    "type": "String"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1080,
            "description": "Setup the gain node and panner for a Web Audio instance.",
            "return": {
                "description": "The new audio node.",
                "type": "Object"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1106,
            "description": "Call/set custom events.",
            "params": [
                {
                    "name": "event",
                    "description": "Event type.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to call.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1131,
            "description": "Remove a custom event.",
            "params": [
                {
                    "name": "event",
                    "description": "Event type.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Listener to remove.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Howl"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1156,
            "description": "Unload and destroy the current Howl object.\nThis will immediately stop all play instances attached to this sound.",
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1202,
            "description": "Buffer a sound from URL (or from cache) and decode to audio source (Web Audio API).",
            "params": [
                {
                    "name": "obj",
                    "description": "The Howl object for the sound to load.",
                    "type": "Object"
                },
                {
                    "name": "url",
                    "description": "The path to the sound file.",
                    "type": "String"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1254,
            "description": "Decode audio data from an array buffer.",
            "params": [
                {
                    "name": "arraybuffer",
                    "description": "The audio data.",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "obj",
                    "description": "The Howl object for the sound to load.",
                    "type": "Object"
                },
                {
                    "name": "url",
                    "description": "The path to the sound file.",
                    "type": "String"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1276,
            "description": "Finishes loading the Web Audio API sound and fires the loaded event",
            "params": [
                {
                    "name": "obj",
                    "description": "The Howl object for the sound to load.",
                    "type": "Object"
                },
                {
                    "name": "buffer",
                    "description": "The decoded buffer sound source.",
                    "type": "Objecct"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1301,
            "description": "Load the sound back into the buffer source.",
            "params": [
                {
                    "name": "obj",
                    "description": "The sound to load.",
                    "type": "Object"
                },
                {
                    "name": "loop",
                    "description": "Loop boolean, pos, and duration.",
                    "type": "Array"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1325,
            "description": "Add support for AMD (Asynchronous Module Definition) libraries such as require.js.",
            "class": "MusicSnippet"
        },
        {
            "file": "howler/howler.js",
            "line": 1337,
            "description": "Add support for CommonJS libraries such as browserify.",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 13,
            "description": "Returns the position of a note in the circle of fifths.",
            "itemtype": "method",
            "name": "ordinal",
            "params": [
                {
                    "name": "note",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ordinal",
                "type": "Integer"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 26,
            "description": "Takes an array of notes and shifts them over by the specified\namount in the circle of fifths. Take care with providing the\namount to shift; you don't want to shift far enough to create\nan unused spelling. Since the shift argument must be in fifths,\nit is a range that can be easily determined.",
            "itemtype": "method",
            "name": "transpose",
            "params": [
                {
                    "name": "notes",
                    "description": "",
                    "type": "String[]"
                },
                {
                    "name": "shift",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "transposed notes",
                "type": "String[]"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 46,
            "description": "Reverses the direction of a collection of notes.\nTo be used for scales and intervals, but NOT chords!\nDo this AFTER the octave is set!",
            "itemtype": "method",
            "name": "reverseDirection",
            "params": [
                {
                    "name": "notes",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "notes",
                "type": "String[]"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 58,
            "description": "Reorders the notes so that they are in the specified inversion.\nTo be used for major triads, minor triads, and 7th chords only!\nNEVER to be used for scales, jazz chords, and 20th century chords!!!",
            "itemtype": "method",
            "name": "setInversion",
            "params": [
                {
                    "name": "notes",
                    "description": "in the chord",
                    "type": "String[]"
                },
                {
                    "name": "number",
                    "description": "between the values 0 and notes.length-1, inclusive",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "inverted chord",
                "type": "String[]"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 76,
            "description": "Calculate the interval between two notes.\nReturns the interval as a number of half steps.",
            "itemtype": "method",
            "name": "calcInterval",
            "params": [
                {
                    "name": "note1",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "note2",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "interval in half steps",
                "type": "Integer"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 111,
            "description": "Calculates the span of a collection of notes. Returns an\ninteger representing the number of half steps between the\nlowest note and highest note in the given note collection.",
            "itemtype": "method",
            "name": "calcSpan",
            "params": [
                {
                    "name": "notes",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "span",
                "type": "Integer"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 127,
            "description": "Sets an octave appropriate for the given span of notes at random.\nDoes so by appending a number to the end of each String.\nDO NOT USE ON A SCALE OR INTERVAL THAT HAS BEEN REVERSED.\nPLEASE REVERSE AFTER SETTING THE OCTAVE!!!\nInverted chords are O.K.",
            "itemtype": "method",
            "name": "setOctave",
            "params": [
                {
                    "name": "notes",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "notes with octave numbers appended to each",
                "type": "String[]"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 163,
            "description": "Generate a random number for the octave in which a note\ncollection may begin.",
            "itemtype": "method",
            "name": "genRandomNum",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "number",
                    "description": "of places in which the notes will fit",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "random number from [lowestOctave, numPlaces)",
                "type": "Integer"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 207,
            "description": "Returns an array of notes in which the gien note collection may begin.",
            "itemtype": "method",
            "name": "getOctaveLocations",
            "params": [
                {
                    "name": "notes",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "notes with octave numbers appended to each",
                "type": "Integer[]"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 268,
            "description": "Sets octave numbers in order, given a starting number. Octave number\nincrements upon ascension from B to C.",
            "itemtype": "method",
            "name": "setOctaveNumbers",
            "params": [
                {
                    "name": "notes",
                    "description": "with un-set Octaves",
                    "type": "String[]]"
                },
                {
                    "name": "starting",
                    "description": "octave",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "octavizedNotes",
                "type": "String[]]"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 293,
            "description": "Go up one note name. G will loop back to A.",
            "itemtype": "method",
            "name": "increment",
            "params": [
                {
                    "name": "note",
                    "description": "name",
                    "type": "Char"
                }
            ],
            "return": {
                "description": "one letter name higher",
                "type": "Char"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 305,
            "description": "Go down one note name. A will loop back to G.",
            "itemtype": "method",
            "name": "decrement",
            "params": [
                {
                    "name": "note",
                    "description": "name",
                    "type": "Char"
                }
            ],
            "return": {
                "description": "one letter name lower",
                "type": "Char"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 317,
            "description": "Determines whether two notenames are enharmonically equivalent.",
            "itemtype": "method",
            "name": "isEnharmonic",
            "params": [
                {
                    "name": "note1",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "note2",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true or false",
                "type": "Boolean"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicManip.js",
            "line": 336,
            "description": "Find the amount to shift to get to a particular note.",
            "itemtype": "method",
            "name": "findShift",
            "params": [
                {
                    "name": "starting",
                    "description": "noteName",
                    "type": "String"
                },
                {
                    "name": "goal",
                    "description": "noteName",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shift",
                "type": "Integer"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 53,
            "description": "Plays the loaded notes with the given style. If style not given, plays the notes quiz style.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "style",
                    "description": "(Optional) How to play the notes",
                    "type": "String"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 106,
            "description": "Plays the note at the given index in the tempSounds array.",
            "itemtype": "method",
            "name": "playNote",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the note to be played",
                    "type": "Integer"
                },
                {
                    "name": "fade",
                    "description": "(Optional) Number of beats to fade out",
                    "type": "Float"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 130,
            "description": "Plays all notes in tempSounds at the same time.",
            "itemtype": "method",
            "name": "playBlock",
            "params": [
                {
                    "name": "fade",
                    "description": "(Optional) Number of beats to fade out",
                    "type": "Integer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 143,
            "description": "Plays all notes in sequence.",
            "itemtype": "method",
            "name": "playBroken",
            "params": [
                {
                    "name": "fade",
                    "description": "(Optional) Number of beats to fade each note by",
                    "type": "Float"
                },
                {
                    "name": "style",
                    "description": "(Optional) Play notes ascending (default) or descending",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 164,
            "description": "Recursive helper for playBroken()",
            "itemtype": "method",
            "name": "playBrokenHelp",
            "params": [
                {
                    "name": "note",
                    "description": "Index of the note to be played",
                    "type": "Integer"
                },
                {
                    "name": "fade",
                    "description": "Number of beats to fade each note by",
                    "type": "Float"
                },
                {
                    "name": "style",
                    "description": "Ascending (default) or descending",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 191,
            "description": "Generates the Howl files to be played.",
            "itemtype": "method",
            "name": "generate",
            "params": [
                {
                    "name": "user_function",
                    "description": "(Optional) Function to call when the files are loaded",
                    "type": "Function"
                },
                {
                    "name": "key",
                    "description": "(Optional) The key to transpose to",
                    "type": "String"
                },
                {
                    "name": "inversion",
                    "description": "(Optional) Which inversion to use",
                    "type": "Integer"
                },
                {
                    "name": "octave",
                    "description": "(Optional) Octave the first note starts in",
                    "type": "Integer"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 228,
            "description": "Transposes notes to a given or random key, gives notes a given or random octave,\n and inverts the notes a given or random amount.",
            "itemtype": "method",
            "name": "TOI",
            "params": [
                {
                    "name": "key",
                    "description": "(Optional) Which key to tranpose to",
                    "type": "String"
                },
                {
                    "name": "inversion",
                    "description": "(Optional) Amount to invert by",
                    "type": "Integer"
                },
                {
                    "name": "octave",
                    "description": "(Optional) Which octave to apply",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "An array of the notes with octave numbers",
                "type": "String[]"
            },
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 295,
            "description": "Returns a new string with the proper quality given the inversion. Only use on \n7th chords.",
            "itemtype": "method",
            "name": "invert7thQuality",
            "params": [
                {
                    "name": "quality",
                    "description": "Original string",
                    "type": "String"
                },
                {
                    "name": "inversion",
                    "description": "Inversion value",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Inverted String",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 330,
            "description": "Takes the given notes and converts them into Howl objects with the appropriate\nsound files.",
            "itemtype": "method",
            "name": "loadFiles",
            "params": [
                {
                    "name": "notes",
                    "description": "Array of notes to be loaded",
                    "type": "String Array"
                }
            ],
            "return": {
                "description": "Array of Howl objects containing the corresponding audio files",
                "type": "Howl Array"
            },
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 388,
            "description": "Fades all sound out",
            "itemtype": "method",
            "name": "fadeOut",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 399,
            "description": "Recursive helper function for this.fadeOut.\nHave to do this recursively in order to use Howl's fadeOut()'s \nthird parameter.",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "note",
                    "description": "Which note to fade",
                    "type": "Integer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 420,
            "description": "Clears all timeouts (delayed sounds)",
            "itemtype": "method",
            "name": "clear",
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 434,
            "description": "Sets the volume of all files",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "vol",
                    "description": "Volume to set to (0.0 - 1.0)",
                    "type": "Float"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 447,
            "description": "Returns the type and quality",
            "itemtype": "method",
            "name": "answer",
            "return": {
                "description": "quality + type",
                "type": "String"
            },
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/MusicSnippet.js",
            "line": 457,
            "description": "Sets the bpm",
            "itemtype": "method",
            "name": "setBPM",
            "params": [
                {
                    "name": "bpm",
                    "description": "Desired beats per minute",
                    "type": "Integer"
                }
            ],
            "class": "MusicSnippet"
        },
        {
            "file": "scripts/Note.js",
            "line": 13,
            "description": "Convert accidentals to numbers.",
            "itemtype": "method",
            "name": "toInt",
            "return": {
                "description": "accidental",
                "type": "Integer"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 25,
            "itemtype": "method",
            "name": "getLettername",
            "return": {
                "description": "lettername",
                "type": "Char"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 33,
            "itemtype": "method",
            "name": "getAccidental",
            "return": {
                "description": "accidental",
                "type": "String"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 41,
            "itemtype": "method",
            "name": "getNotename",
            "return": {
                "description": "notename",
                "type": "String"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 49,
            "itemtype": "method",
            "name": "getOctave",
            "return": {
                "description": "octave",
                "type": "Integer"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 57,
            "description": "Compares two notes by pitch. Returns a positive integer if the first note is\nhigher than the second note, negative integer if the first note is lower\nthan the second note, and 0 if they are the same note.",
            "itemtype": "method",
            "name": "compareTo",
            "params": [
                {
                    "name": "otherNote",
                    "description": "",
                    "type": "Note"
                }
            ],
            "return": {
                "description": "interval in half steps",
                "type": "Integer"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 69,
            "description": "Reference array for converting the difference between two ordinal positions\nin the circle of fifths to the arbitrary name of an interval.",
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 99,
            "description": "Calculates the interval between two notes in standard notation.",
            "itemtype": "method",
            "name": "getInterval",
            "params": [
                {
                    "name": "otherNote",
                    "description": "",
                    "type": "Note"
                }
            ],
            "return": {
                "description": "interval",
                "type": "Integer"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 119,
            "description": "Creates a note a particular interval away from this note.",
            "itemtype": "method",
            "name": "getNextNote",
            "params": [
                {
                    "name": "interval",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "direction,",
                    "description": "true ascending, false descending",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "note",
                "type": "Note"
            },
            "class": "Note"
        },
        {
            "file": "scripts/Note.js",
            "line": 164,
            "description": "String representation of a musical note.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "notename + octave",
                "type": "String"
            },
            "class": "Note"
        },
        {
            "file": "scripts/ParseCSV.js",
            "line": 1,
            "description": "This script loads the content of data.csv into a global variable, 'data'.",
            "class": "QuestionGenerator"
        },
        {
            "file": "scripts/ParseCSV.js",
            "line": 6,
            "description": "A 2D array containing the contents of the csv file",
            "itemtype": "property",
            "name": "",
            "type": "Array",
            "class": "QuestionGenerator"
        },
        {
            "file": "scripts/QuestionGenerator.js",
            "line": 17,
            "description": "Builds an array of MusicSnippets",
            "itemtype": "method",
            "name": "makeMusicSnippets",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "indices",
                    "description": "",
                    "type": "Integer[]"
                }
            ],
            "return": {
                "description": "array of MusicSnippets",
                "type": "MusicSnippet[]"
            },
            "class": "QuestionGenerator"
        },
        {
            "file": "scripts/QuestionGenerator.js",
            "line": 34,
            "description": "Picks a random MusicSnippet from the array.",
            "itemtype": "method",
            "name": "getNextQuestion",
            "return": {
                "description": "random MusicSnippet",
                "type": "MusicSnippet"
            },
            "class": "QuestionGenerator"
        },
        {
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 21,
            "itemtype": "method",
            "name": "getAnswers",
            "return": {
                "description": "intervals",
                "type": "String[]"
            },
            "class": "SuccessiveMelodicIntervals"
        },
        {
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 33,
            "description": "Returns the notes as Strings",
            "itemtype": "method",
            "name": "getNotes",
            "return": {
                "description": "notes",
                "type": "String[]"
            },
            "class": "SuccessiveMelodicIntervals"
        },
        {
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 47,
            "description": "Generates a 4-note 12-tone melody using backtracking.",
            "itemtype": "method",
            "name": "generateMelody",
            "return": {
                "description": "notes",
                "type": "Note[]"
            },
            "class": "SuccessiveMelodicIntervals"
        },
        {
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 119,
            "description": "Create a palette of notes to try based on previous note.",
            "itemtype": "method",
            "name": "getPalette",
            "params": [
                {
                    "name": "melody",
                    "description": "current index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "palette",
                "type": "Note[]"
            },
            "class": "SuccessiveMelodicIntervals"
        },
        {
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 160,
            "description": "Picks a random starting note. Use notes 9 through 25 (Gb—A#)",
            "itemtype": "method",
            "name": "getStartingPalette",
            "return": {
                "description": "palette",
                "type": "Note"
            },
            "class": "SuccessiveMelodicIntervals"
        },
        {
            "file": "scripts/SuccessiveMelodicIntervals.js",
            "line": 173,
            "description": "Seeded shuffle.",
            "params": [
                {
                    "name": "shuffleNotes",
                    "description": ""
                },
                {
                    "name": "notes",
                    "description": "to shuffle",
                    "type": "Note[]"
                },
                {
                    "name": "seed",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "shuffled notes",
                "type": "Note[]"
            },
            "class": "SuccessiveMelodicIntervals"
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 1,
            "description": "Validation rules for successive melodic intervals.",
            "itemtype": "method",
            "name": "validateSMI",
            "params": [
                {
                    "name": "notes",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true or false",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 16,
            "description": "Sort the notes in order from lowest to highest.",
            "itemtype": "method",
            "name": "sortNotes",
            "return": {
                "description": "sorted notes",
                "type": "Note[]"
            },
            "class": ""
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 42,
            "description": "Make sure no two notes are repeated.",
            "itemtype": "method",
            "name": "checkRepeats",
            "return": {
                "description": "true if valid, false if not",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 60,
            "description": "Ensure that the melody does not exceed the span of an octave.",
            "itemtype": "method",
            "name": "checkSpan",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 70,
            "description": "Ensure that the intervals do not occur all in the same direction.",
            "itemtype": "method",
            "name": "checkDirections",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 95,
            "description": "Ensure that any interval is used no more than once.",
            "itemtype": "method",
            "name": "checkIntervals",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "scripts/ValidateSMI.js",
            "line": 117,
            "description": "Ensure that the melody does not outline a triad or 7th chord.",
            "itemtype": "method",
            "name": "checkForHarmony",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "scripts/noteToFileNum.js",
            "line": 1,
            "description": "Associative array (object) for converting note names to audio file numbers",
            "itemtype": "property",
            "name": "",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nGet/set the global volume for all sounds.",
            "line": " howler/howler.js:62"
        },
        {
            "message": "Missing item type\nMute all sounds.",
            "line": " howler/howler.js:97"
        },
        {
            "message": "Missing item type\nUnmute all sounds.",
            "line": " howler/howler.js:107"
        },
        {
            "message": "Missing item type\nHandle muting and unmuting globally.",
            "line": " howler/howler.js:117"
        },
        {
            "message": "Missing item type\nCheck for codec support.",
            "line": " howler/howler.js:140"
        },
        {
            "message": "Missing item type\niOS will only allow audio to be played after a user interaction.\nAttempt to automatically unlock audio on the first user interaction.\nConcept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/",
            "line": " howler/howler.js:149"
        },
        {
            "message": "Missing item type\nLoad an audio file.",
            "line": " howler/howler.js:277"
        },
        {
            "message": "Missing item type\nGet/set the URLs to be pulled from to play in this source.",
            "line": " howler/howler.js:379"
        },
        {
            "message": "Missing item type\nPlay a sound from the current time (0 by default).",
            "line": " howler/howler.js:399"
        },
        {
            "message": "Missing item type\nPause playback and save the current position.",
            "line": " howler/howler.js:547"
        },
        {
            "message": "Missing item type\nStop playback and reset to start.",
            "line": " howler/howler.js:593"
        },
        {
            "message": "Missing item type\nMute this sound.",
            "line": " howler/howler.js:639"
        },
        {
            "message": "Missing item type\nUnmute this sound.",
            "line": " howler/howler.js:668"
        },
        {
            "message": "Missing item type\nGet/set volume of this sound.",
            "line": " howler/howler.js:697"
        },
        {
            "message": "Missing item type\nGet/set whether to loop the sound.",
            "line": " howler/howler.js:736"
        },
        {
            "message": "Missing item type\nGet/set sound sprite definition.",
            "line": " howler/howler.js:753"
        },
        {
            "message": "Missing item type\nGet/set the position of playback.",
            "line": " howler/howler.js:773"
        },
        {
            "message": "Missing item type\nGet/set the 3D position of the audio source.\nThe most common usage is to set the 'x' position\nto affect the left/right ear panning. Setting any value higher than\n1.0 will begin to decrease the volume of the sound as it moves further away.\nNOTE: This only works with Web Audio API, HTML5 Audio playback\nwill not be affected.",
            "line": " howler/howler.js:817"
        },
        {
            "message": "Missing item type\nFade a currently playing sound between two volumes.",
            "line": " howler/howler.js:862"
        },
        {
            "message": "Missing item type\n[DEPRECATED] Fade in the current sound.",
            "line": " howler/howler.js:907"
        },
        {
            "message": "Missing item type\n[DEPRECATED] Fade out the current sound and pause when finished.",
            "line": " howler/howler.js:918"
        },
        {
            "message": "Missing item type\nGet an audio node by ID.",
            "line": " howler/howler.js:938"
        },
        {
            "message": "Missing item type\nGet the first active audio node.",
            "line": " howler/howler.js:957"
        },
        {
            "message": "Missing item type\nGet the first inactive audio node.\nIf there is none, create a new one and add it to the pool.",
            "line": " howler/howler.js:979"
        },
        {
            "message": "Missing item type\nIf there are more than 5 inactive audio nodes in the pool, clear out the rest.",
            "line": " howler/howler.js:1024"
        },
        {
            "message": "Missing item type\nClear 'onend' timeout before it ends.",
            "line": " howler/howler.js:1057"
        },
        {
            "message": "Missing item type\nSetup the gain node and panner for a Web Audio instance.",
            "line": " howler/howler.js:1080"
        },
        {
            "message": "Missing item type\nCall/set custom events.",
            "line": " howler/howler.js:1106"
        },
        {
            "message": "Missing item type\nRemove a custom event.",
            "line": " howler/howler.js:1131"
        },
        {
            "message": "Missing item type\nUnload and destroy the current Howl object.\nThis will immediately stop all play instances attached to this sound.",
            "line": " howler/howler.js:1156"
        },
        {
            "message": "Missing item type\nBuffer a sound from URL (or from cache) and decode to audio source (Web Audio API).",
            "line": " howler/howler.js:1202"
        },
        {
            "message": "Missing item type\nDecode audio data from an array buffer.",
            "line": " howler/howler.js:1254"
        },
        {
            "message": "Missing item type\nFinishes loading the Web Audio API sound and fires the loaded event",
            "line": " howler/howler.js:1276"
        },
        {
            "message": "Missing item type\nLoad the sound back into the buffer source.",
            "line": " howler/howler.js:1301"
        },
        {
            "message": "Missing item type\nAdd support for AMD (Asynchronous Module Definition) libraries such as require.js.",
            "line": " howler/howler.js:1325"
        },
        {
            "message": "Missing item type\nAdd support for CommonJS libraries such as browserify.",
            "line": " howler/howler.js:1337"
        },
        {
            "message": "Missing item type\nReference array for converting the difference between two ordinal positions\nin the circle of fifths to the arbitrary name of an interval.",
            "line": " scripts/Note.js:69"
        },
        {
            "message": "Missing item type\nThis script loads the content of data.csv into a global variable, 'data'.",
            "line": " scripts/ParseCSV.js:1"
        },
        {
            "message": "Missing item type\nSeeded shuffle.",
            "line": " scripts/SuccessiveMelodicIntervals.js:173"
        }
    ]
}